TBS.Commands = TBS.Commands or {}

--[[ Add a new command line interface (cli) command for tbs.
    Arguments:
        command: A string or array of strings to activate the command.
            e.g. If the argument is set to ["connect", "cnct"], then the CLI
                commands

                    /tbs connect

                and

                    /tbs cnct

                will both activate this command.

        fn: The function to call when the command is invoked. Should be of the
            form:

                function(args, isTBSWindow)

            args:
                where 'args' is an array of the command line arguments. For
                example, the command:
                    "/tbs testcommand hello there"
                will execute the "testcommand" function with
                args = ['testcommand', 'hello', 'there']

            isTBSWindow: boolean
                if true: allows the command output to be sent to the TBS-Chat Window.
                if false: sends the command output to the VO-Chat Window.

        help: A short string to be displayed for the "/tbs help" command.
]]

TBS.newCliCommand = function(command, fn, helptext)
    table.insert(TBS.Commands,
        {
            command=command,
            fn=fn,
            helptext=helptext
        })
end


TBS.newCliCommand('connect',
    function(args)
        if(not TBS.Connection.isConnected)then
            TBS.Connection._Connect();
        else
            TBS.Connection.CleanUp() --close connection.
        end;
    end,
    "Connect to the TBS server."
)

TBS.newCliCommand('say',
    function(args)
        table.remove(args, 1) --"say"
        TBS.TBSSay(nil, args)
    end,
    "Send a chat message to the TBS channel."
)

TBS.newCliCommand('reload',
    function(args)
        TBS.CleanUp()
        ReloadInterface()
    end,
    "Reload the VO interface. All plugins will be reloaded."
)

TBS.newCliCommand('debug',
    function(args)
        if(TBS.debug)then TBS.debug = false;
        else TBS.debug = true end;
        TBS.print("@yellow@> TBS.debug = "..tostring(TBS.debug));
    end,
    "Toggle TBS debug mode"
)

TBS.newCliCommand('help',
    function(args)
        TBS.printCliHelp()
    end,
    'Print TBS help.'
)

TBS.printCliHelp = function()
    for i,v in ipairs(TBS.Commands) do
        local cmd = ''
        if type(v.command) == 'table' then
            cmd = spickle(v.command)
        else
            cmd = v.command
        end

        TBS.print('@yellow@'..cmd..'@white@: '..v.helptext)
    end
end








--==========--

TBS.newCliCommand({'ui_settings', 'uisettings', 'settings'},
    function(args)
        TBS.UISettings:showDialog()
    end,
    "Open the TBS settings dialog."
)

TBS.newCliCommand({'set_member_password', 'setmemberpassword', 'setpassword'},
    function(args)
        -- Expected arguments: password
        if #args < 3 then
            TBS.print('set_member_password usage: set_member_password <password> <auth-code> [email]', TBS.colors.WHITE)
            return
        end
        local opt_params = {}
        if args[4] ~= nil then
            opt_params['email'] = args[4]
        end

        -- Make sure we are connected first
        local status, errmsg = pcall( function()
            TBS.debugprint('Connecting...')
            TBS.Connection.connect():next( function()
                TBS.debugprint('Connecting...done')
                return TBS.Proxy.setMemberPassword(GetPlayerName(), args[2], args[3], opt_params)
            end)
            :next( function(result)
                TBS.debugprint("setMemberPassword result: " .. tostring(result))
            end)
            :catch( function(err)
                TBS.debugprint("setMemberPassword failed: " .. err)
            end)
        end)
        if not status then
            TBS.print(errmsg, TBS.colors.red)
        end
    end,
    "Set a new password for yourself. Requires an auth-code to be previously generated by register_user or ui_register_user"
)

TBS.newCliCommand({'ui_register_user', 'uiregisteruser'},
    function(args)
        TBS.UIRegisterUser:showDialog()
    end,
    "UI interface to register a new user. Automaticaly generates and sends the new user an auth-code they can use to create an account."
)
